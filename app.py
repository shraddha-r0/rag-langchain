"""
Ornithology RAG Chatbot - Streamlit Web Interface

This module provides a user-friendly web interface for interacting with the Ornithology RAG system.
It allows users to ask questions about ornithology and receive answers generated by the RAG system.
"""

import os
import logging
import streamlit as st
from dotenv import load_dotenv
from rag_bot.rag_chain import get_rag_response

# Set up logging to track user interactions and system responses
os.makedirs("logs", exist_ok=True)  # Create logs directory if it doesn't exist
logging.basicConfig(
    filename="logs/chatbot_usage.log",  # Log file path
    level=logging.INFO,  # Log level (INFO, WARNING, ERROR, etc.)
    format="%(asctime)s - %(levelname)s - %(message)s"  # Log message format
)

# Load environment variables from .env file
load_dotenv()

# Configure the Streamlit page settings
st.set_page_config(
    page_title="🦜 Ornithology RAG Chatbot",  # Browser tab title
    page_icon="🦜",  # Browser tab icon
    layout="wide"  # Page layout option
)

# Display the application header with custom HTML/CSS for better styling
st.markdown("""
    <h1 style='text-align: center; color: #4CAF50;'>📚 Study with the Bird Brain Bot</h1>
    <p style='text-align: center; font-size:18px;'>
        Learning ornithology? I'm your feathered friend with fun facts, witty quips, 
        and no judgment for last-minute cramming.
    </p>
""", unsafe_allow_html=True)
st.markdown("---")  # Horizontal line for visual separation

# Tone selection radio button - allows users to choose between different response styles
tone = st.radio(
    "Choose the response tone:",  # Label for the radio button group
    ["Factual", "Witty"],  # Available tone options
    horizontal=True  # Display options horizontally
)
# Convert the selected tone to lowercase and replace spaces with underscores for internal use
tone_key = tone.lower().replace(" ", "_")

# Text input field for user questions
query = st.text_input(
    "📝 What's your bird-related question?",  # Input field label
    placeholder="e.g., How do hummingbirds hover?"  # Placeholder text
)

# Process the user's question when entered
if query:
    # Show a loading spinner while processing the query
    with st.spinner("Consulting the aviary archives... 🪶"):
        # Get response from the RAG system with the selected tone
        response = get_rag_response(query, tone=tone_key)
        answer = response["result"]  # Extract the generated answer
        sources = response["source_documents"]  # Extract source documents for references

        # Log the interaction for analysis and debugging
        logging.info(f"USER: {query}")  # Log the user's question
        logging.info(f"BOT: {answer}")   # Log the system's response

        # Display the answer in a formatted way
        st.markdown("### 🧠 Answer")  # Section header
        st.write(answer)  # Display the generated answer

        # Create an expandable section to show source documents
        with st.expander("🔍 View sources used in this answer"):
            # Loop through each source document and display its metadata and content
            for i, doc in enumerate(sources):
                # Show the source file name (or 'Unknown' if not available)
                st.markdown(f"**Source {i+1}:** {doc.metadata.get('source', 'Unknown')}")
                # Display a preview of the source content (first 400 characters)
                st.markdown(doc.page_content[:400] + "..." if len(doc.page_content) > 400 else doc.page_content)